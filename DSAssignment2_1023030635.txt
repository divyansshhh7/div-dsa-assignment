                                 ASSIGNMENT 2:

NAME: Divyansh Arora   ROLL NUMBER: 1024030635

QUE1: Implement the Binary search algorithm regarded as a fast search algorithm with
run-time complexity of ÎŸ(log n) in comparison to the Linear Search.

CODE:

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int arr[100];
    cout << "Enter " << n << " elements (sorted): ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int key;
    cout << "Enter element to search: ";
    cin >> key;

    int first = 0, last = n - 1, pos = -1;
    while (first <= last) {
        int mid = (first + last) / 2;
        if (arr[mid] == key) {
            pos = mid;
            break;
        }
        else if (arr[mid] < key) {
            first = mid + 1;
        }
        else {
            last = mid - 1;
        }
    }

    if (pos != -1) {
        cout << "Element found at index " << pos << endl;
    }
    else {
        cout << "Element not found" << endl;
    }

    return 0;
}

OUTPUT:

Enter size of array: 5
Enter 5 elements (sorted): 1
2
3
4
5
Enter element to search: 3
Element found at index 2



------------------X----------------------X----------------------X-------------------------



QUE2: Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping
the adjacent elements if they are in wrong order. Code the Bubble sort with the
following elements:
64 34 25 12 22 11 90

CODE:

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1-i; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}


OUTPUT:

Enter size of array: 5
Enter 5 elements: 3
2
6
4
1
Sorted array: 1 2 3 4 6 


------------------X----------------------X----------------------X-------------------------

QUE3: Given an array of n-1 distinct integers in the range of 1 to n, find the missing number
in it in a Sorted Array
(a) Linear time
(b) Using binary search.

CODE (a):

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter n (range 1 to n): ";
    cin >> n;

    int arr[100];
    cout << "Enter " << n - 1 << " elements in sorted order: ";
    for (int i = 0; i < n - 1; i++) {
        cin >> arr[i];
    }

    int missing = n;
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] != i + 1) {
            missing = i + 1;
            break;
        }
    }

    cout << "Missing number is: " << missing << endl;

    return 0;
}

OUTPUT:

Enter n (range 1 to n): 5
Enter 4 elements in sorted order: 1
2
3
4
Missing number is: 5


CODE (b):

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter n (range 1 to n): ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n - 1 << " elements in sorted order: ";
    for (int i = 0; i < n - 1; i++) {
        cin >> arr[i];
    }

    int first = 0, last = n - 2, ans = n;
    while (first <= last) {
        int mid = (first + last) / 2;
        if (arr[mid] == mid + 1) {
            first = mid + 1;
        }
        else {
            ans = mid + 1;
            last = mid - 1;
        }
    }

    cout << "Missing number is: " << ans << endl;

    return 0;
}

OUTPUT:

Enter n (range 1 to n): 5
Enter 4 elements in sorted order: 1
3
4
5
Missing number is: 2

------------------X----------------------X----------------------X-------------------------


QUE4: String Related Programs
(a) Write a program to concatenate one string to another string.
(b) Write a program to reverse a string.
(c) Write a program to delete all the vowels from the string.
(d) Write a program to sort the strings in alphabetical order.
(e) Write a program to convert a character from uppercase to lowercase.

CODE (a): 

#include <iostream>
using namespace std;

int main() {
    
    string str1,str2;
    cout<<"Enter first and second strings to be concatenated: "<<endl;
    getline(cin,str1);
    getline(cin,str2);
    
	char res[100];
	int i=0,j=0;
	
	while(str1[i]!='\0'){
		res[i]=str1[i];
		i++;
	}
	
	while(str2[j]!='\0'){
		res[i]=str2[j];
		i++,j++;
	}
		
	res[i]='\0';
	
	cout<<"Concatenated result is: "<<res;

    return 0;
}


OUTPUT (a):

Enter first and second strings to be concatenated: 
Hey 
Durgesh
Concatenated result is: Hey Durgesh

CODE (b):

#include <iostream>
using namespace std;

int main() {
    
    string str;
	cout<<"Enter the string to be reversed"<<endl;
	getline(cin,str);
	
	int i=0,j=str.length()-1;
	while(j>i){
		int temp=str[i];
		str[i]=str[j];
		str[j]=temp;
		
		i++,j--;
	}
	cout<<"The reversed string is: "<<endl;
	cout<<str;

    return 0;
}


OUTPUT (b):

Enter the string to be reversed
Hello World
The reversed string is: 
dlroW olleH

CODE (c):

#include <iostream>
using namespace std;

int main() {
    
    string str;
	cout<<"Enter the string whose vowels need to be removed"<<endl;
	getline(cin,str);
	int size=str.length();
	
	for(int i=0;i<size;i++){
		if(str[i]=='a' || str[i]=='e' || str[i]=='i' || str[i]=='o' || str[i]=='u'){
			for(int j=i;j<size-1;j++){
				str[j]=str[j+1];
			}
			size--;
		}
	}
	
	cout<<"The string after removing the vowels is: "<<endl;
	for(int i=0;i<size;i++){
		cout<<str[i];
	}

    return 0;
}


OUTPUT (c):

Enter the string whose vowels need to be removed
Hello World
The string after removing the vowels is: 
Hll Wrld


CODE (d):

int arr[26]={};
	
	string str;
	cout<<"Enter the string you want to make in alphabetical order"<<endl;
	getline(cin,str);
	
	for(int i=0;i<str.length();i++){
		arr[str[i]-'a']++;
	}
	
	cout<<"Final result: "<<endl;
	
	for(int i=0;i<26;i++){
		if(arr[i]>0){
			
			while(arr[i]){
				char c=i+'a';
				cout<<c;
				arr[i]--;
			}
		}
		
	}

OUTPUT (d):

Enter the string you want to make in alphabetical order
hello
Final result: 
ehllo

CODE (e):

#include <iostream>
using namespace std;

int main() {
    char ch;
    cout << "Enter a character: ";
    cin >> ch;

    if (ch >= 'A' && ch <= 'Z') {
        ch = ch + 32;
    }

    cout << "Lowercase: " << ch << endl;

    return 0;
}


OUTPUT (e):

Enter a character: D
Lowercase: d

------------------X----------------------X----------------------X-------------------------

QUE7: Let A[1 .... n] be an array of n real numbers. A pair (A[i], A[j ]) is said to be an
inversion if these numbers are out of order, i.e., i < j but A[i]>A[j ]. Write a program to
count the number of inversions in an array.

CODE:

#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter size of array: ";
    cin >> n;

    int arr[n];
    cout << "Enter " << n << " numbers: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                count++;
            }
        }
    }

    cout << "Number of inversions: " << count << endl;

    return 0;
}

OUTPUT:

Enter size of array: 5
Enter 5 numbers: 1
2
3
4
5
Number of inversions: 0

------------------X----------------------X----------------------X-------------------------


QUE8: Write a program to count the total number of distinct elements in an array of length
n.

CODE:

#include <iostream>
using namespace std;

int main() {
    int size;
	cout<<"Enter the size of the array"<<endl;
	cin>>size;
	
	int arr[size];
	cout<<"Enter the elements of the array"<<endl;
	for(int i=0;i<size;i++){
		cin>>arr[i];
	}

	int counter[255]={};
	
	for(int i=0;i<size;i++){
		int help=arr[i];
		counter[help]++;
	}
	
	int count =0;
	
	for(int i=0;i<255;i++){
		if(counter[i]>0){
			count++;
		}
	}
	
	cout<<endl<<"Number of unique elements are: "<<count;
	
	return 0;
}

OUTPUT:

Enter the size of the array
5
Enter the elements of the array
1
2
2
4
7

Number of unique elements are: 4

------------------X----------------------X----------------------X-------------------------

